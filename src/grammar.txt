S > FUNCTIONS
S > %
FUNCTIONS > FUNCTION FUNCTIONS'
FUNCTIONS' > FUNCTION FUNCTIONS'
FUNCTIONS' > %
FUNCTION > func ident ( ARGUMENTS ) : int { STATEMENTS }
ARGUMENTS > ARGUMENTS'
ARGUMENTS > %
ARGUMENTS' > ARGUMENT ARGUMENTS''
ARGUMENTS'' > , ARGUMENTS'
ARGUMENTS'' > %
ARGUMENT > ident : int
STATEMENTS > STATEMENT STATEMENTS'
STATEMENTS' > STATEMENT STATEMENTS'
STATEMENTS' > %
STATEMENT > IF
STATEMENT > statement ;
STATEMENT > DECLARATION ;
IF > if ( BOOL_EXPR ) { STATEMENTS } ELSE
ELSE > else { STATEMENTS }
ELSE > %
DECLARATION > ident : int DECLARATION'
DECLARATION' > = EXPR
DECLARATION' > %
EXPR > TERM EXPR'
EXPR' > + TERM EXPR'
EXPR' > - TERM EXPR'
EXPR' > %
TERM > FACTOR TERM'
TERM' > * FACTOR TERM'
TERM' > / FACTOR TERM'
TERM' > %
FACTOR > ( EXPR )
FACTOR > num
FACTOR > ident
BOOL_EXPR > RELATION_AND BOOL_EXPR'
BOOL_EXPR' > or RELATION_AND BOOL_EXPR'
BOOL_EXPR' > %
RELATION_AND > NOTS RELATION_AND'
RELATION_AND' > and NOTS RELATION_AND'
RELATION_AND' > %
NOTS > ! NOTS
NOTS > RELATION
RELATION > EXPR COMP EXPR
RELATION > true
RELATION > false
RELATION > [ BOOL_EXPR ]
COMP > >
COMP > <
COMP > ==
COMP > >=
COMP > <=
COMP > !=